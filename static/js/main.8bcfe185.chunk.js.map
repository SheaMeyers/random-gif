{"version":3,"sources":["keys.ts","reducer.ts","components/DisplayGif.tsx","components/Header.tsx","components/SearchBar.tsx","modals/DisplayGifModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["giphyApiKey","initialState","shouldDisplayModalGif","isSearchingForGifs","searchText","src","url","title","rating","searchedGifs","reducer","state","action","type","embed_url","bitly_url","console","warn","DisplayGif","props","className","frameBorder","href","toUpperCase","Header","SearchBar","TextField","variant","value","onFocus","handleOnFocus","sx","background","InputProps","startAdornment","InputAdornment","position","Icon","endAdornment","onClick","handleClearText","onChange","event","handleSearchTextChange","target","displayCancelButton","Button","marginLeft","color","handleSearchCancel","DisplayGifModal","appElement","document","body","isOpen","contentLabel","closeTimeoutMS","style","cursor","handleModalClose","displayGifComponent","App","useReducer","dispatch","gifComponent","getNewRandomGif","axios","get","then","response","data","catch","error","log","getSearchGifElements","a","map","result","images","alt","useEffect","interval","setInterval","clearInterval","length","Card","maxWidth","CardContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8bcfe185.chunk.js","sourcesContent":["// Note: In a real world scenario this should be retrieved from the environment\n//   using process.env or something similar so the Api Key is not publicly exposed\nconst giphyApiKey = 'N6Hk8HXId49DwxEzUEBc4YzpjL97eZ1D';\n\nexport { giphyApiKey } ;\n","const initialState = {\n  shouldDisplayModalGif: false,\n  isSearchingForGifs: false,\n  searchText: \"\",\n  src: \"\",\n  url: \"\",\n  title: \"\",\n  rating: \"\",\n  searchedGifs: [],\n};\n\nconst reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"NEW_GIF\":\n      return {\n        ...state,\n        src: action.embed_url,\n        url: action.bitly_url,\n        title: action.title,\n        rating: action.rating,\n      };\n    case \"SET_TEXT\":\n      return {\n        ...state,\n        searchText: action.searchText,\n      };\n    case \"CLEAR_TEXT\":\n      return {\n        ...state,\n        searchText: \"\",\n        searchedGifs: [],\n      };\n    case \"SEARCH_TEXT_FOCUSED\":\n      return {\n        ...state,\n        isSearchingForGifs: true,\n      };\n    case \"SEARCH_TEXT_UNFOCUSED\":\n      return {\n        ...state,\n        searchText: \"\",\n        searchedGifs: [],\n        isSearchingForGifs: false,\n      };\n    case \"SEARCHED_GIFS\":\n      return {\n        ...state,\n        searchedGifs: action.searchedGifs,\n      };\n    case \"SET_MODAL_GIF\":\n      return {\n        ...state,\n        shouldDisplayModalGif: true,\n        src: action.embed_url,\n        url: action.bitly_url,\n        title: action.title,\n        rating: action.rating,\n      };\n    case \"CLOSE_MODAL\":\n      return {\n        ...state,\n        shouldDisplayModalGif: false,\n      };\n    default:\n      console.warn(`Reducer action ${action.type} did not match any cases`);\n      return state;\n  }\n};\n\nexport { initialState };\nexport default reducer;\n","import \"../css/DisplayGif.css\";\n\ninterface Props {\n    src: string;\n    url: string;\n    title: string;\n    rating: string;\n}\n\nconst DisplayGif = (props: Props) => {\n    return (\n      <>\n        <iframe \n          src={props.src} \n          className=\"Gif\" \n          title=\"random-gif\" \n          frameBorder=\"0\" \n        />\n        <br /><br />\n        <div className=\"Gif-Info\">\n          <div className=\"Gif-Info__Container\">\n            <div className=\"Gif-Info__Title-and-Rating\">\n              <p className=\"Gif-Info__Title\">{props.title}</p>\n              <a href={props.url}>{props.url}</a>\n            </div>\n            <div className=\"Gif-Info__Rating\">\n              <b>{props.rating.toUpperCase()}</b>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n}\n\nexport default DisplayGif;\n","import \"../css/Header.css\";\n\nconst Header = () => {\n    return (\n        <div className=\"Header\">\n            <a href=\"https://github.com/SheaMeyers/random-gif\" className=\"Header-Link\">\n                <b>See the code</b>\n            </a>\n            <h1 className=\"Header-Title\">Random Gif</h1>\n        </div>\n    )\n}\n\nexport default Header;\n","import Button from \"@mui/material/Button\";\nimport Icon from \"@mui/material/Icon\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport TextField from \"@mui/material/TextField\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport '../css/SearchBar.css';\n\ninterface Props {\n  displayCancelButton: boolean;\n  searchText: string;\n  handleOnFocus: Function;\n  handleClearText: Function;\n  handleSearchTextChange: Function;\n  handleSearchCancel: Function;\n}\n\nconst SearchBar = (props: Props) => {\n  return (\n    <div className=\"Search-Bar\">\n      <TextField\n        variant=\"outlined\"\n        value={props.searchText}\n        onFocus={() => props.handleOnFocus()}\n        sx={{ background: 'white' }}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Icon>\n                <SearchIcon />\n              </Icon>\n            </InputAdornment>\n          ),\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              {props.searchText && (\n                <Icon onClick={() => props.handleClearText()}>\n                  <CancelIcon />\n                </Icon>\n              )}\n            </InputAdornment>\n          ),\n        }}\n        onChange={(event) => props.handleSearchTextChange(event.target.value)}\n      />\n      {props.displayCancelButton && (\n        <Button\n          sx={{ marginLeft: '1rem' }}\n          variant=\"contained\"\n          color=\"error\"\n          onClick={() => props.handleSearchCancel()}\n        >\n          Cancel\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import Modal from \"react-modal\";\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport '../css/Modal.css';\n\ninterface Props {\n  isOpen: boolean;\n  handleModalClose: Function;\n  title: string;\n  displayGifComponent: React.ReactElement;\n}\n\nconst DisplayGifModal = (props: Props) => {\n  return (\n    <Modal\n      appElement={document.body}\n      isOpen={props.isOpen}\n      contentLabel=\"Display Gif Modal\"\n      closeTimeoutMS={200}\n      className=\"modal\"\n    >\n      <span className=\"Modal-Header\">\n        <ArrowBackIosIcon \n          style={{cursor: 'pointer'}}\n          onClick={() => props.handleModalClose()}\n        />\n        <h2>{props.title}</h2>\n      </span>\n      {props.displayGifComponent}\n    </Modal>\n  );\n};\n\nexport default DisplayGifModal;\n","import { useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport { giphyApiKey } from \"./keys\";\nimport reducer, { initialState } from \"./reducer\";\nimport DisplayGif from \"./components/DisplayGif\";\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\nimport DisplayGifModal from \"./modals/DisplayGifModal\";\nimport \"./css/App.css\";\n\n\nconst App = () => {\n  const newGifInterval = 10000; // 10 seconds\n  const gifSearchLimit = 10; // number of results\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const gifComponent = (\n    <DisplayGif\n      src={state.src}\n      url={state.url}\n      title={state.title}\n      rating={state.rating}\n    />\n  );\n\n  const getNewRandomGif = () => {\n    axios\n      .get(`https://api.giphy.com/v1/gifs/random?api_key=${giphyApiKey}`)\n      .then((response) => dispatch({ ...response.data.data, type: \"NEW_GIF\" }))\n      .catch((error) => console.log(error));\n  };\n\n  const getSearchGifElements = async (searchText: string) => {\n    const response = await axios.get(\n      `https://api.giphy.com/v1/gifs/search?api_key=${giphyApiKey}&q=${searchText}&limit=${gifSearchLimit}`\n    );\n    \n    const searchedGifs = response.data.data.map((result: any) => {\n        return (\n          <img\n            src={result.images[\"480w_still\"].url}\n            alt={result.title}\n            className=\"Searched-Image\"\n            onClick={() =>\n              dispatch({\n                type: \"SET_MODAL_GIF\",\n                embed_url: result.embed_url,\n                bitly_url: result.bitly_url,\n                title: result.title,\n                rating: result.rating,\n              })\n            }\n            key={result.embed_url}\n          />\n        );\n      }\n    );\n    dispatch({ type: \"SEARCHED_GIFS\", searchedGifs });\n  };\n\n  const closeGifModal = () => dispatch({ type: \"CLOSE_MODAL\" });\n\n  const handleSearchTextChange = (searchText: string) => {\n    dispatch({ type: \"SET_TEXT\", searchText });\n    if (searchText.length < 1) {\n      dispatch({ type: \"CLEAR_TEXT\" });\n    } else {\n      getSearchGifElements(searchText);\n    }\n  };\n  const handleSearchCancelClick = () =>\n    dispatch({ type: \"SEARCH_TEXT_UNFOCUSED\" });\n  const handleSearchFocus = () => dispatch({ type: \"SEARCH_TEXT_FOCUSED\" });\n  const handleClearSearchText = () => dispatch({ type: \"CLEAR_TEXT\" });\n\n  useEffect(() => {\n    if (!state.isSearchingForGifs) {\n      getNewRandomGif();\n      const interval = setInterval(getNewRandomGif, newGifInterval);\n      return () => clearInterval(interval);\n    }\n  }, [state.isSearchingForGifs]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <SearchBar\n        displayCancelButton={state.isSearchingForGifs}\n        searchText={state.searchText}\n        handleOnFocus={handleSearchFocus}\n        handleClearText={handleClearSearchText}\n        handleSearchTextChange={handleSearchTextChange}\n        handleSearchCancel={handleSearchCancelClick}\n      />\n      <br />\n      {state.isSearchingForGifs ? (\n        // Display search results\n        <>\n          <p>Search results</p>\n          <div className=\"Search-Gifs\">{state.searchedGifs}</div>\n        </>\n      ) : (\n        // No search text, display random gif\n        <Card sx={{ maxWidth: 600 }}>\n          <CardContent>\n            <p>Random selected gif: </p>\n            {gifComponent}\n          </CardContent>\n        </Card>\n      )}\n      <DisplayGifModal\n        isOpen={state.shouldDisplayModalGif}\n        handleModalClose={closeGifModal}\n        title={state.title}\n        displayGifComponent={gifComponent}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}